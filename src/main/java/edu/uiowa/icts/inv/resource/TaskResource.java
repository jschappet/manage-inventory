package edu.uiowa.icts.inv.resource;

import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import edu.uiowa.icts.exception.EntityNotFoundException;
import edu.uiowa.icts.inv.domain.Task;
import edu.uiowa.icts.inv.domain.WorkLog;
import edu.uiowa.icts.util.WorkLogManager;

/**
 * Generated by Protogen 
 * @since ${date}
 */
@RestController
@RequestMapping( "/api/task" )
public class TaskResource extends AbstractInvApiResource {

    private static final Log log = LogFactory.getLog( TaskResource.class );
    
    @RequestMapping( value = { "{taskId}" }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public Task get(@PathVariable( "taskId" ) Integer taskId ) {
    	
    	 Task task = invDaoService.getTaskService().findById( taskId );
		 if (task == null){
			 log.debug("get task");
			 throw new EntityNotFoundException();
		 } 
	     return task;
    }
    
    @RequestMapping( method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE  )
    public Task create(@RequestBody @Valid Task task ) {
    	task.setCreated(new Date());
    	task.setCreatedBy(getUsername());
    	if (task.getAssignedTo() == null) {
    		task.setAssignedTo(getUsername());
    	}
    	if (task.getDeadline() == null) {
    		task.setDeadline(new Date());
    	}
    	if (task.getProperty() == null) {
    		task.setProperty(invDaoService.getPropertyService().findById(60));
    	}
    	
		 invDaoService.getTaskService().save( task );
		 return task;
    }
    
    @RequestMapping( 
    		value = { "{taskId}" }, 
    		method = {RequestMethod.POST, RequestMethod.PUT}, 
    		produces = MediaType.APPLICATION_JSON_VALUE  )
    public Task update(@PathVariable( "taskId" ) Integer taskId, @RequestBody @Valid Task task ) {
    	log.debug("In update method");
    	Task taskRecord = invDaoService.getTaskService().findById( taskId );
    	if (taskRecord == null || !taskRecord.getTaskId().equals(task.getTaskId())){
			 throw new EntityNotFoundException(); 
		 } 
    	 invDaoService.getTaskService().getSession().flush();
         invDaoService.getTaskService().getSession().clear();
		 invDaoService.getTaskService().update( task );
		 return task;
    }
    
	@RequestMapping(value = { "{taskId}" }, method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	public String delete(@PathVariable("taskId") Integer taskId) {
		Task task = invDaoService.getTaskService().findById(taskId);

		log.debug("Starting to complete Task: '" + taskId + "'");
		try {
			task = invDaoService.getTaskService().findById(taskId);
		} catch (Exception e) {
			log.error("Error finding TaskId: " + taskId, e);
			throw new EntityNotFoundException();

		}

		log.debug("Task TaskType: " + task.getTaskType());
		try {

			WorkLog wl = WorkLogManager.completeTask(task, getUsername(), "TO BE ADDED");
			try {

				invDaoService.getWorkLogService().save(wl);
				invDaoService.getTaskService().delete(task);
			} catch (Exception e) {
				log.error("Could not complete task", e);
			}
			log.debug("Completed Task");

		} catch (NonUniqueObjectException e) {
			log.debug("Merging Results");
			invDaoService.getTaskService().merge(task);
		}
		return "";

	}
    
    @RequestMapping( value = {  "", "/"  }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public List<Task> list() {
    	
    	 return invDaoService.getTaskService().listByPerson(getUsername());
    	//return invDaoService.getTaskService().list();
    }
    
    @RequestMapping( value = {  "", "/"  }, method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE )
    public Task put(@RequestBody @Valid Task task) {
    	log.debug(task);
    	
    	if (task.getDone()) {
    		log.debug("task is completed: " +  task.getTaskId() + ": " + task.getName() );
    	}
		 invDaoService.getTaskService().update( task );

    	 return task;
    	//return invDaoService.getTaskService().list();
    }
    
    
    @RequestMapping( value = {  "mine"  }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public List<Task> myList() {
    	log.debug("My Task List Username: " + getUsername());
    	 return invDaoService.getTaskService().listByPerson(getUsername());
    }

}