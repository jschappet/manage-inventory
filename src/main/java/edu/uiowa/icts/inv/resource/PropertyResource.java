package edu.uiowa.icts.inv.resource;



import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.*;

import edu.uiowa.icts.inv.domain.*;
import edu.uiowa.icts.exception.EntityNotFoundException;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 10/18/2015 08:25:18 CDT
 */
@RestController( value = "edu_uiowa_icts_inv_resource_property_resource" )
@RequestMapping( "/api/property" )
public class PropertyResource extends AbstractInvApiResource {

    private static final Log log = LogFactory.getLog( PropertyResource.class );
    
    @RequestMapping( value = { "{propertyId}" }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public Property get( @PathVariable( "propertyId" ) Integer propertyId ) {
    	 Property property = invDaoService.getPropertyService().findById( propertyId );
		 if (property == null){
			 throw new EntityNotFoundException();
		 } 
	     return property;
    }
    
    @RequestMapping( method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE  )
    public Property create( @RequestBody @Valid Property property ) {
		 invDaoService.getPropertyService().save( property );
		 return property;
    }
    
    @RequestMapping( value = { "{propertyId}" }, method = { RequestMethod.POST, RequestMethod.PUT }, produces = MediaType.APPLICATION_JSON_VALUE  )
    public Property update( @PathVariable( "propertyId" ) Integer propertyId, @RequestBody @Valid Property property ) {
    	Property propertyRecord = invDaoService.getPropertyService().findById( propertyId );
    	if ( propertyRecord == null || !propertyRecord.getPropertyId().equals(property.getPropertyId())){
			 throw new EntityNotFoundException(); 
		 } 
    	 invDaoService.getPropertyService().getSession().flush();
         invDaoService.getPropertyService().getSession().clear();
		 invDaoService.getPropertyService().update( property );
		 return property;
    }
    
    @RequestMapping( value = { "{propertyId}" }, method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE )
    public String delete( @PathVariable( "propertyId" ) Integer propertyId ) {
    	Property property = invDaoService.getPropertyService().findById( propertyId );
		 if ( property == null ){
			 throw new EntityNotFoundException();
		 } 
		 invDaoService.getPropertyService().delete(property);
	     return "";
    }
    
    @RequestMapping( value = {  "", "/"  }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public List<Property> list() {
    	 return invDaoService.getPropertyService().list();
    }

}