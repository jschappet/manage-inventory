package edu.uiowa.icts.inv.resource;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.*;

import edu.uiowa.icts.inv.domain.*;
import edu.uiowa.icts.exception.EntityNotFoundException;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @since ${date}
 */
@RestController
@RequestMapping( "/api/role" )
public class RoleResource extends AbstractInvApiResource {

    private static final Log log = LogFactory.getLog( RoleResource.class );
    
    @RequestMapping( value = { "{roleId}" }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public Role get(@PathVariable( "roleId" ) Integer roleId ) {
    	 Role role = invDaoService.getRoleService().findById( roleId );
		 if (role == null){
			 throw new EntityNotFoundException();
		 } 
	     return role;
    }
    
    @RequestMapping( method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE  )
    public Role create(@RequestBody @Valid Role role ) {
		 invDaoService.getRoleService().save( role );
		 return role;
    }
    
    @RequestMapping( value = { "{roleId}" }, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE  )
    public Role update(@PathVariable( "roleId" ) Integer roleId, @RequestBody @Valid Role role ) {
    	Role roleRecord = invDaoService.getRoleService().findById( roleId );
    	if (roleRecord == null || !roleRecord.getRoleId().equals(role.getRoleId())){
			 throw new EntityNotFoundException(); 
		 } 
    	 invDaoService.getRoleService().getSession().flush();
         invDaoService.getRoleService().getSession().clear();
		 invDaoService.getRoleService().update( role );
		 return role;
    }
    
    @RequestMapping( value = { "{roleId}" }, method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE )
    public String delete(@PathVariable( "roleId" ) Integer roleId ) {
    	Role role = invDaoService.getRoleService().findById( roleId );
		 if (role == null){
			 throw new EntityNotFoundException();
		 } 
		 invDaoService.getRoleService().delete(role);
	     return "";
    }
    
    @RequestMapping( value = {  "", "/"  }, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE )
    public List<Role> list() {
    	 return invDaoService.getRoleService().list();
    }

}