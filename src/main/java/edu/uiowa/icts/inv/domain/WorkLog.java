package edu.uiowa.icts.inv.domain;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 10/26/2015 05:44:58 PM CDT
 */
@Entity( name = "edu_uiowa_icts_inv_domain_workLog" )
@Table( name = "work_log", schema = "inv" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class WorkLog { 

	private static final Log log = LogFactory.getLog( WorkLog.class );

    private Integer taskId;
    private String name;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date created;
    private String createdBy;
    private String assignedTo;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date deadline;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date completed;
    private String note;
    private String taskType;
    private Property property;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="inv.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "task_id", unique = true, nullable = false)
    public Integer getTaskId(){
        return taskId;
    }

    public void setTaskId(Integer taskId){
        this.taskId = taskId;
    }

    @Column(name = "name")
    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    @Column(name = "created")
    public Date getCreated(){
        return created;
    }

    @JsonSetter
    public void setCreated(Date created){
        this.created = created;
    }

    @JsonIgnore
    public void setCreated( String created ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.created = formatter.parse(created);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for Created", e );
        }
    }

    @Column(name = "created_by")
    public String getCreatedBy(){
        return createdBy;
    }

    public void setCreatedBy(String createdBy){
        this.createdBy = createdBy;
    }

    @Column(name = "assigned_to")
    public String getAssignedTo(){
        return assignedTo;
    }

    public void setAssignedTo(String assignedTo){
        this.assignedTo = assignedTo;
    }

    @Column(name = "deadline")
    public Date getDeadline(){
        return deadline;
    }

    @JsonSetter
    public void setDeadline(Date deadline){
        this.deadline = deadline;
    }

    @JsonIgnore
    public void setDeadline( String deadline ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.deadline = formatter.parse(deadline);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for Deadline", e );
        }
    }

    @Column(name = "completed")
    public Date getCompleted(){
        return completed;
    }

    @JsonSetter
    public void setCompleted(Date completed){
        this.completed = completed;
    }

    @JsonIgnore
    public void setCompleted( String completed ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.completed = formatter.parse(completed);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for Completed", e );
        }
    }

    @Column(name = "note")
    public String getNote(){
        return note;
    }

    public void setNote(String note){
        this.note = note;
    }

    @Column(name = "task_type")
    public String getTaskType(){
        return taskType;
    }

    public void setTaskType(String taskType){
        this.taskType = taskType;
    }

    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Property.class )
    @JoinColumn(name = "property_id",nullable = true)
    public Property getProperty(){
        return property;
    }

    public void setProperty(Property property){
        this.property = property;
    }


}
