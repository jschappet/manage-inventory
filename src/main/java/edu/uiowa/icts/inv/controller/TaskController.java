package edu.uiowa.icts.inv.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.inv.domain.Task;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @since 10/16/2015 11:14:57 CDT
 */
@Controller( value = "edu_uiowa_icts_inv_controller_task_controller" )
@RequestMapping( "/task" )
public class TaskController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( TaskController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "taskList", invDaoService.getTaskService().list() );
        return "/inv/task/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list( ModelMap model) {
        model.addAttribute( "task", new Task() );
 		model.addAttribute( "propertyList", invDaoService.getPropertyService().list() );
 		model.addAttribute( "taskTypeList", invDaoService.getTaskTypeService().list() );

        return "/inv/task/list";
    }

     
	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		DataTable dt = new DataTable();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = invDaoService.getTaskService().count( options );
            List<Task> taskList = invDaoService.getTaskService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( Task task : taskList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					if( StringUtils.equals( "taskId", headerName ) ){
						tableRow.put( dataName, task.getTaskId() );
					} else if( StringUtils.equals( "taskType", headerName ) ){
						tableRow.put( dataName, task.getTaskType() );
					} else if( StringUtils.equals( "name", headerName ) ){
						tableRow.put( dataName, task.getName() );
					} else if( StringUtils.equals( "created", headerName ) ){
						tableRow.put( dataName, task.getCreated() );
					} else if( StringUtils.equals( "createdBy", headerName ) ){
						tableRow.put( dataName, task.getCreatedBy() );
					} else if( StringUtils.equals( "assignedTo", headerName ) ){
						tableRow.put( dataName, task.getAssignedTo() );
					} else if( StringUtils.equals( "deadline", headerName ) ){
						tableRow.put( dataName, task.getDeadline() );
					} else if( StringUtils.equals( "completed", headerName ) ){
						tableRow.put( dataName, task.getCompleted() );
					} else if( StringUtils.equals( "property", headerName ) ){
						if( task.getProperty() != null ){
							tableRow.put( dataName, task.getProperty().toString() );
						}
					} else if( StringUtils.equals( "urls", headerName ) ) {
						String urls = "";
						if( StringUtils.equals( "list", display ) ){
							urls += "<a href=\"" + contextPath + "/task/show?"+"taskId="+task.getTaskId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
							urls += "<a href=\"" + contextPath + "/task/edit?"+"taskId="+task.getTaskId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
							urls += "<a href=\"" + contextPath + "/task/delete?"+"taskId="+task.getTaskId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
						} else {

						}
						tableRow.put( dataName, urls );
					} else {
						tableRow.put( "error", "[error: column " + headerName + " not supported]" );
					}
				}
				data.add( tableRow );
			}

			dt.setDraw( dataTableRequest.getDraw() );
            dt.setRecordsFiltered( count );
            dt.setRecordsTotal( count );
			dt.setData( data );

		} catch ( Exception e ) {
			log.error( "error builing datatable json object for Task", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
		return dt;
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "task", new Task() );
		model.addAttribute( "propertyList", invDaoService.getPropertyService().list() );

        return "/inv/task/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "taskId" ) Integer taskId ) {
		model.addAttribute( "propertyList", invDaoService.getPropertyService().list() );


        model.addAttribute( "task", invDaoService.getTaskService().findById( taskId ) );
        return "/inv/task/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "taskId" ) Integer taskId ) {

        model.addAttribute( "task", invDaoService.getTaskService().findById( taskId ) );
        return "/inv/task/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "task" ) Task task, BindingResult result, Model model ) {

    	

		if (result.hasErrors()) { 
					model.addAttribute( "propertyList", invDaoService.getPropertyService().list() );

			return "/inv/task/edit"; 
		} else {
			try {
				if (task.getCreated() == null) {
					task.setCreated(new Date());
					task.setCreatedBy(getUsername());
				}
				
				
				invDaoService.getTaskService().saveOrUpdate( task );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				invDaoService.getTaskService().merge( task );
			}
		}
		return "redirect:/task/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "taskId" ) Integer taskId ) {

        model.addAttribute( "task", invDaoService.getTaskService().findById( taskId ) );
        return "/inv/task/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "taskId" ) Integer taskId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            invDaoService.getTaskService().delete( invDaoService.getTaskService().findById( taskId ) );
        }
        return "redirect:/task/list";
    }
}