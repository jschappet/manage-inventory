package com.schappet.inv.controller;

import com.schappet.inv.domain.*;
import com.schappet.inv.dao.*;
import edu.uiowa.icts.spring.*;
import edu.uiowa.icts.util.SortColumn;
import edu.uiowa.icts.spring.GenericDaoListOptions;
import java.io.IOException;
import java.io.StringReader;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * Generated by Protogen 
 * @date 07/03/2014 12:55:47 CDT
 */
@Controller
@RequestMapping( "/inv/location/*" )
public class LocationController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( LocationController.class );

    @RequestMapping(value = "list_alt.html", method = RequestMethod.GET)
    public ModelAndView listNoScript() {
        ModelMap model = new ModelMap();
        model.addAttribute("locationList",invDaoService.getLocationService().list());
        return new ModelAndView("inv/location/list_alt", model);
    }

    @RequestMapping(value = "list.html", method = RequestMethod.GET)
    public ModelAndView list() {
        return new ModelAndView("inv/location/list");
    }

    @RequestMapping(value = "datatable.html", method = RequestMethod.GET)
    public void datatable( HttpServletRequest request, HttpServletResponse response, 
        @RequestParam(value="iDisplayLength") Integer limit, 
        @RequestParam(value="iDisplayStart") Integer start, 
        @RequestParam(value="iColumns") Integer numberColumns, 
        @RequestParam(value="iColumns") Integer columnCount, 
        @RequestParam(value="sColumns") String columns, 
        @RequestParam(value="sEcho") String echo, 
        @RequestParam(value="bFilter") String bFilter, 
        @RequestParam(value="iSortingCols", required=false) Integer sortingColsCount, 
        @RequestParam(value="sSearch", required=false) String search, 
        @RequestParam(value="display", required=false, defaultValue="list") String display ) {

        ArrayList<SortColumn> sorts = new ArrayList<SortColumn>();
        try {

            response.setContentType( "application/json" );

            String[] colArr = columns.split(",");

            if( sortingColsCount != null ){
                for( int i = 0; i < sortingColsCount; i++){
                    if( i < colArr.length ){
                        Integer colnum = null;
                        String col = request.getParameter( "iSortCol_" + i );
                        if ( col != null ) {
                            try {
                                colnum = Integer.parseInt( col );
                            } catch ( NumberFormatException e ) {
                                continue;
                            }
                            if( colnum != null ){
                                sorts.add( new SortColumn( colArr[ colnum ], request.getParameter( "sSortDir_" + i ) ) );
                            }
                        }
                    }
                }
            }

            GenericDaoListOptions options = new GenericDaoListOptions();

            if( Boolean.valueOf( bFilter ) ){
                ArrayList<String> searchColumns = new ArrayList<String>();
                for( int i = 0; i < numberColumns; i++ ){
                    if( Boolean.valueOf( request.getParameter( "bSearchable_"+i ) ) ){
                        searchColumns.add( colArr[i] );
                    }
                }
                options.setSearch( search );
                options.setSearchColumns( searchColumns );
            } else {
                HashMap<String,Object> likes = new HashMap<String, Object>();
                for( String column : colArr ){
                    String columnValue = request.getParameter( column );
                    if( columnValue != null ){
                        for ( String splitColumnValue : StringUtils.split( columnValue, ' ' ) ) {
                            likes.put( column, splitColumnValue );
                        }
                    }
                }
                options.setIndividualLikes(likes);
            }

            Integer count = invDaoService.getLocationService().count( options );

            options.setLimit(limit);
            options.setStart(start);
            options.setSorts(sorts);

            List<Location> locationList = invDaoService.getLocationService().list( options );

            JSONObject ob = new JSONObject();
            ob.put( "sEcho", echo );
            ob.put( "iTotalDisplayRecords", count );
            ob.put( "iTotalRecords", count );
            JSONArray jsonArray = new JSONArray();
            for( Location location : locationList ){
                JSONArray tmp = new JSONArray();
                for( String column : colArr ){
                    if( "locationId".equals(column) ){
                        tmp.put(location.getLocationId());
                    } else if( "name".equals(column) ){
                        tmp.put(location.getName());
                    } else if( "description".equals(column) ){
                        tmp.put(location.getDescription());
                    } else if( "address1".equals(column) ){
                        tmp.put(location.getAddress1());
                    } else if( "address2".equals(column) ){
                        tmp.put(location.getAddress2());
                    } else if( "city".equals(column) ){
                        tmp.put(location.getCity());
                    } else if( "state".equals(column) ){
                        tmp.put(location.getState());
                    } else if( "zipCode".equals(column) ){
                        tmp.put(location.getZipCode());
                    } else if( "propertys".equals(column) ){
                        tmp.put(location.getPropertys());
                    } else if( "urls".equals(column)) {
                        String urls = "";
                        if( "list".equals( display ) ){
                            urls += "<a href=\"show.html?"+"locationId="+location.getLocationId()+"\">[view]</a>";
                            urls += "<a href=\"edit.html?"+"locationId="+location.getLocationId()+"\">[edit]</a>";
                            urls += "<a href=\"delete.html?"+"locationId="+location.getLocationId()+"\">[delete]</a>";
                        } else {

                        }
                        tmp.put( urls );
                    } else {
                        tmp.put( "[error column "+column+" not supported]" );
                    }
                }
                jsonArray.put( tmp );
            }
            ob.put( "aaData", jsonArray );

            StringReader reader = new StringReader( ob.toString() );
            try {
                IOUtils.copy( reader, response.getWriter() );
            } finally {
                reader.close();
            }
        } catch ( Exception e ) {
            try {
                log.error( "error builing datatable json object", e );
                String stackTrace = e.getMessage() + "<br/>";
                for( StackTraceElement ste : e.getStackTrace() ){
                    stackTrace += ste.toString()+"<br/>";
                }
                JSONObject ob = new JSONObject();
                ob.put("sEcho", echo);
                ob.put("iTotalDisplayRecords", 0);
                ob.put("iTotalRecords", 0);
                ob.put("error", e.getMessage());
                ob.put("stackTrace", stackTrace);
                StringReader reader = new StringReader(ob.toString());
                try {
                    IOUtils.copy( reader, response.getWriter() );
                } finally {
                    reader.close();
                }
            } catch ( JSONException je ) {
                log.error( "error writing json error to page", je );
            } catch (IOException ioe) {
                log.error("error writing json error to page", ioe);
            }
        }
    }

    @RequestMapping(value = "add.html", method = RequestMethod.GET)
    public ModelAndView add() {
        ModelMap model = new ModelMap();
        Location location = new Location();
        model.addAttribute("location",location);
        return new ModelAndView("inv/location/edit",model);
    }

    @RequestMapping(value = "edit.html", method = RequestMethod.GET)
    public ModelAndView edit(@RequestParam("locationId") Integer locationId) {
        ModelMap model = new ModelMap();
        Location location = invDaoService.getLocationService().findById(locationId);
        model.addAttribute("location",location);
        return new ModelAndView("inv/location/edit",model);
    }

    @RequestMapping(value = "show.html", method = RequestMethod.GET)
    public ModelAndView show(@RequestParam("locationId") Integer locationId) {
        ModelMap model = new ModelMap();
        Location location = invDaoService.getLocationService().findById(locationId);
        model.addAttribute("location",location);
        return new ModelAndView("inv/location/show",model);
    }

    @RequestMapping(value = "save.html", method = RequestMethod.POST)
    public String save(@ModelAttribute("location") Location location) {
        invDaoService.getLocationService().saveOrUpdate(location);
        return "redirect:/inv/location/list.html";
    }

    @RequestMapping( value = "delete.html", method = RequestMethod.GET )
    public ModelAndView confirmDelete( @RequestParam("locationId") Integer locationId ) {
        ModelMap model = new ModelMap();
        Location location = invDaoService.getLocationService().findById(locationId);
        model.addAttribute( "location", location );
        return new ModelAndView("inv/location/delete", model );
    }

    @RequestMapping( value = "delete.html", method = RequestMethod.POST )
    public String doDelete( @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( "locationId" ) Integer locationId  ) {
        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            Location location = invDaoService.getLocationService().findById( locationId );
            invDaoService.getLocationService().delete( location );
        }
        return "redirect:/inv/location/list.html";
    }
}