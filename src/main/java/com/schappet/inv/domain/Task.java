package com.schappet.inv.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import com.schappet.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen - www.icts.uiowa.edu/protogen 
 * @date 2014/06/27 07:27:13
 */ 

@Entity(name="com_schappet_inv_domain_task")
@Table(name = "task", schema="inv")
public class Task { 

	private static final Log log = LogFactory.getLog(Task.class);

        private Integer taskId;
        private String taskType;
        private String name;
        @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date created;
        private String createdBy;
        private String assignedTo;
        @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date deadline;
        @DateTimeFormat(pattern = "yyyy-MM-dd")
    private Date completed;
        private Property property;

    public Task()    {
        this.taskId = null;
        this.taskType = "";
        this.name = "";
        this.created = null;
        this.createdBy = "";
        this.assignedTo = "";
        this.deadline = null;
        this.completed = null;
        this.property = null;
    }

    public Task(Integer taskId, String taskType, String name, Date created, String createdBy, String assignedTo, Date deadline, Date completed, Property property)
    {
        this.taskId = taskId;
        this.taskType = taskType;
        this.name = name;
        this.created = created;
        this.createdBy = createdBy;
        this.assignedTo = assignedTo;
        this.deadline = deadline;
        this.completed = completed;
        this.property = property;
    }

    /*****taskId*****/
    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="inv.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "task_id", unique = true, nullable = false)
    public Integer getTaskId(){
        return taskId;
    }

    public void setTaskId(Integer taskId){
        this.taskId = taskId;
    }

    /*****taskType*****/
    @Column(name = "task_type")
    public String getTaskType(){
        return taskType;
    }

    public void setTaskType(String taskType){
        this.taskType = taskType;
    }

    /*****name*****/
    @Column(name = "name")
    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    /*****created*****/
    @Column(name = "created")
    public Date getCreated(){
        return created;
    }

    public void setCreated(Date created){
        this.created = created;
    }

    public void setCreated(String created){
        try{
            DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            formatter.setLenient(true);
            this.created = formatter.parse(created);
        } catch (ParseException e) { 
            log.error(" ParseException setting date for Created", e);
        }
    }

    /*****createdBy*****/
    @Column(name = "created_by")
    public String getCreatedBy(){
        return createdBy;
    }

    public void setCreatedBy(String createdBy){
        this.createdBy = createdBy;
    }

    /*****assignedTo*****/
    @Column(name = "assigned_to")
    public String getAssignedTo(){
        return assignedTo;
    }

    public void setAssignedTo(String assignedTo){
        this.assignedTo = assignedTo;
    }

    /*****deadline*****/
    @Column(name = "deadline")
    public Date getDeadline(){
        return deadline;
    }

    public void setDeadline(Date deadline){
        this.deadline = deadline;
    }

    public void setDeadline(String deadline){
        try{
            DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            formatter.setLenient(true);
            this.deadline = formatter.parse(deadline);
        } catch (ParseException e) { 
            log.error(" ParseException setting date for Deadline", e);
        }
    }

    /*****completed*****/
    @Column(name = "completed")
    public Date getCompleted(){
        return completed;
    }

    public void setCompleted(Date completed){
        this.completed = completed;
    }

    public void setCompleted(String completed){
        try{
            DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            formatter.setLenient(true);
            this.completed = formatter.parse(completed);
        } catch (ParseException e) { 
            log.error(" ParseException setting date for Completed", e);
        }
    }

    /*****property*****/
    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Property.class )
    @JoinColumn(name = "property_id",nullable = true)
    public Property getProperty(){
        return property;
    }

    public void setProperty(Property property){
        this.property = property;
    }


}
