package com.schappet.inv.controller;

import com.schappet.inv.domain.*;
import com.schappet.inv.dao.*;

import edu.uiowa.icts.spring.*;
import edu.uiowa.icts.util.PasswordTools;
import edu.uiowa.icts.util.SortColumn;
import edu.uiowa.icts.spring.GenericDaoListOptions;

import java.io.IOException;
import java.io.StringReader;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * Generated by Protogen 
 * @date 07/03/2014 12:45:24 CDT
 */
@Controller
@RequestMapping( "/inv/person/*" )
public class PersonController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( PersonController.class );

    @RequestMapping(value = "list_alt.html", method = RequestMethod.GET)
    public ModelAndView listNoScript() {
        ModelMap model = new ModelMap();
        model.addAttribute("personList",invDaoService.getPersonService().list());
        return new ModelAndView("inv/person/list_alt", model);
    }

    @RequestMapping(value = "list.html", method = RequestMethod.GET)
    public ModelAndView list() {
        return new ModelAndView("inv/person/list");
    }

    @RequestMapping(value = "datatable.html", method = RequestMethod.GET)
    public void datatable( HttpServletRequest request, HttpServletResponse response, 
        @RequestParam(value="iDisplayLength") Integer limit, 
        @RequestParam(value="iDisplayStart") Integer start, 
        @RequestParam(value="iColumns") Integer numberColumns, 
        @RequestParam(value="iColumns") Integer columnCount, 
        @RequestParam(value="sColumns") String columns, 
        @RequestParam(value="sEcho") String echo, 
        @RequestParam(value="bFilter") String bFilter, 
        @RequestParam(value="iSortingCols", required=false) Integer sortingColsCount, 
        @RequestParam(value="sSearch", required=false) String search, 
        @RequestParam(value="display", required=false, defaultValue="list") String display ) {

        ArrayList<SortColumn> sorts = new ArrayList<SortColumn>();
        try {

            response.setContentType( "application/json" );

            String[] colArr = columns.split(",");

            if( sortingColsCount != null ){
                for( int i = 0; i < sortingColsCount; i++){
                    if( i < colArr.length ){
                        Integer colnum = null;
                        String col = request.getParameter( "iSortCol_" + i );
                        if ( col != null ) {
                            try {
                                colnum = Integer.parseInt( col );
                            } catch ( NumberFormatException e ) {
                                continue;
                            }
                            if( colnum != null ){
                                sorts.add( new SortColumn( colArr[ colnum ], request.getParameter( "sSortDir_" + i ) ) );
                            }
                        }
                    }
                }
            }

            GenericDaoListOptions options = new GenericDaoListOptions();

            if( Boolean.valueOf( bFilter ) ){
                ArrayList<String> searchColumns = new ArrayList<String>();
                for( int i = 0; i < numberColumns; i++ ){
                    if( Boolean.valueOf( request.getParameter( "bSearchable_"+i ) ) ){
                        searchColumns.add( colArr[i] );
                    }
                }
                options.setSearch( search );
                options.setSearchColumns( searchColumns );
            } else {
                HashMap<String,Object> likes = new HashMap<String, Object>();
                for( String column : colArr ){
                    String columnValue = request.getParameter( column );
                    if( columnValue != null ){
                        for ( String splitColumnValue : StringUtils.split( columnValue, ' ' ) ) {
                            likes.put( column, splitColumnValue );
                        }
                    }
                }
                options.setIndividualLikes(likes);
            }

            Integer count = invDaoService.getPersonService().count( options );

            options.setLimit(limit);
            options.setStart(start);
            options.setSorts(sorts);

            List<Person> personList = invDaoService.getPersonService().list( options );

            JSONObject ob = new JSONObject();
            ob.put( "sEcho", echo );
            ob.put( "iTotalDisplayRecords", count );
            ob.put( "iTotalRecords", count );
            JSONArray jsonArray = new JSONArray();
            for( Person person : personList ){
                JSONArray tmp = new JSONArray();
                for( String column : colArr ){
                    if( "personId".equals(column) ){
                        tmp.put(person.getPersonId());
                    } else if( "firstName".equals(column) ){
                        tmp.put(person.getFirstName());
                    } else if( "lastName".equals(column) ){
                        tmp.put(person.getLastName());
                    } else if( "username".equals(column) ){
                        tmp.put(person.getUsername());
                    } else if( "consent".equals(column) ){
                        tmp.put(person.getConsent());
                    } else if( "deleted".equals(column) ){
                        tmp.put(person.getDeleted());
                    } else if( "languageId".equals(column) ){
                        tmp.put(person.getLanguageId());
                    } else if( "urls".equals(column)) {
                        String urls = "";
                        if( "list".equals( display ) ){
                            urls += "<a href=\"show.html?"+"personId="+person.getPersonId()+"\">[view]</a>";
                            urls += "<a href=\"edit.html?"+"personId="+person.getPersonId()+"\">[edit]</a>";
                            urls += "<a href=\"delete.html?"+"personId="+person.getPersonId()+"\">[delete]</a>";
                        } else {

                        }
                        tmp.put( urls );
                    } else {
                        tmp.put( "[error column "+column+" not supported]" );
                    }
                }
                jsonArray.put( tmp );
            }
            ob.put( "aaData", jsonArray );

            StringReader reader = new StringReader( ob.toString() );
            try {
                IOUtils.copy( reader, response.getWriter() );
            } finally {
                reader.close();
            }
        } catch ( Exception e ) {
            try {
                log.error( "error builing datatable json object", e );
                String stackTrace = e.getMessage() + "<br/>";
                for( StackTraceElement ste : e.getStackTrace() ){
                    stackTrace += ste.toString()+"<br/>";
                }
                JSONObject ob = new JSONObject();
                ob.put("sEcho", echo);
                ob.put("iTotalDisplayRecords", 0);
                ob.put("iTotalRecords", 0);
                ob.put("error", e.getMessage());
                ob.put("stackTrace", stackTrace);
                StringReader reader = new StringReader(ob.toString());
                try {
                    IOUtils.copy( reader, response.getWriter() );
                } finally {
                    reader.close();
                }
            } catch ( JSONException je ) {
                log.error( "error writing json error to page", je );
            } catch (IOException ioe) {
                log.error("error writing json error to page", ioe);
            }
        }
    }

    @RequestMapping(value = "add.html", method = RequestMethod.GET)
    public ModelAndView add() {
        ModelMap model = new ModelMap();
        Person person = new Person();
        model.addAttribute("person",person);
        return new ModelAndView("inv/person/edit",model);
    }

    @RequestMapping(value = "edit.html", method = RequestMethod.GET)
    public ModelAndView edit(@RequestParam("personId") Integer personId) {
        ModelMap model = new ModelMap();
        Person person = invDaoService.getPersonService().findById(personId);
        model.addAttribute("person",person);
        return new ModelAndView("inv/person/edit",model);
    }

    @RequestMapping(value = "show.html", method = RequestMethod.GET)
    public ModelAndView show(@RequestParam("personId") Integer personId) {
        ModelMap model = new ModelMap();
        Person person = invDaoService.getPersonService().findById(personId);
        model.addAttribute("person",person);
        return new ModelAndView("inv/person/show",model);
    }

    @RequestMapping(value = "save.html", method = RequestMethod.POST)
    public String save(@ModelAttribute("person") Person person) {
		PasswordTools ptools = new PasswordTools();
		person.setPassword(ptools.hashPassword(person.getPassword()));

        invDaoService.getPersonService().saveOrUpdate(person);
        return "redirect:/inv/person/list.html";
    }

    @RequestMapping( value = "delete.html", method = RequestMethod.GET )
    public ModelAndView confirmDelete( @RequestParam("personId") Integer personId ) {
        ModelMap model = new ModelMap();
        Person person = invDaoService.getPersonService().findById(personId);
        model.addAttribute( "person", person );
        return new ModelAndView( "inv/person/delete", model );
    }
    
    @RequestMapping(value = "changePassword.html", method = RequestMethod.GET)
	public ModelAndView changePassword(
			@RequestParam("personId") int personId,
			@RequestParam(value= "status",required=false) String status,
			HttpServletRequest req,ModelMap model)
	{
		if(status != null && status.equalsIgnoreCase("error"))
			model.addAttribute("redBoxMessage", "Error Changing Password");
		model.addAttribute("personId", personId);
		model.addAttribute("templatepagename","changePassword");
		String template="";
		template="Default";
		return new ModelAndView(template,model);

	}
	@RequestMapping(value = "saveChangePassword.html", method = RequestMethod.POST)
	public ModelAndView saveChangePassword(
			@RequestParam("personId") int personId,
			@RequestParam("password") String password,
			HttpServletRequest req,ModelMap model
	) 
	{
		PasswordTools ptools = new PasswordTools();

		Person person = invDaoService.getPersonService().findById(personId);
		person.setPassword(ptools.hashPassword(password));



		invDaoService.getPersonService().save(person);

		return new ModelAndView("redirect:list.html",model);

	}

    @RequestMapping( value = "delete.html", method = RequestMethod.POST )
    public String doDelete( @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( "personId" ) Integer personId  ) {
        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            Person person = invDaoService.getPersonService().findById( personId );
            invDaoService.getPersonService().delete( person );
        }
        return "redirect:/inv/person/list.html";
    }
}