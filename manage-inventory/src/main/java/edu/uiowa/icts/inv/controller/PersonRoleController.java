package edu.uiowa.icts.inv.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.inv.domain.*;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @since 10/16/2015 11:14:57 CDT
 */
@Controller( value = "edu_uiowa_icts_inv_controller_personrole_controller" )
@RequestMapping( "/personrole" )
public class PersonRoleController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( PersonRoleController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "personRoleList", invDaoService.getPersonRoleService().list() );
        return "/inv/personrole/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list() {
        return "/inv/personrole/list";
    }

	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		DataTable dt = new DataTable();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = invDaoService.getPersonRoleService().count( options );
            List<PersonRole> personRoleList = invDaoService.getPersonRoleService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( PersonRole personRole : personRoleList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					if( StringUtils.equals( "personRoleId", headerName ) ){
						tableRow.put( dataName, personRole.getPersonRoleId() );
					} else if( StringUtils.equals( "role", headerName ) ){
						if( personRole.getRole() != null ){
							tableRow.put( dataName, personRole.getRole().toString() );
						}
					} else if( StringUtils.equals( "person", headerName ) ){
						if( personRole.getPerson() != null ){
							tableRow.put( dataName, personRole.getPerson().toString() );
						}
					} else if( StringUtils.equals( "urls", headerName ) ) {
						String urls = "";
						if( StringUtils.equals( "list", display ) ){
							urls += "<a href=\"" + contextPath + "/personrole/show?"+"personRoleId="+personRole.getPersonRoleId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
							urls += "<a href=\"" + contextPath + "/personrole/edit?"+"personRoleId="+personRole.getPersonRoleId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
							urls += "<a href=\"" + contextPath + "/personrole/delete?"+"personRoleId="+personRole.getPersonRoleId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
						} else {

						}
						tableRow.put( dataName, urls );
					} else {
						tableRow.put( "error", "[error: column " + headerName + " not supported]" );
					}
				}
				data.add( tableRow );
			}

			dt.setDraw( dataTableRequest.getDraw() );
            dt.setRecordsFiltered( count );
            dt.setRecordsTotal( count );
			dt.setData( data );

		} catch ( Exception e ) {
			log.error( "error builing datatable json object for PersonRole", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
		return dt;
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "personRole", new PersonRole() );
		model.addAttribute( "roleList", invDaoService.getRoleService().list() );
		model.addAttribute( "personList", invDaoService.getPersonService().list() );

        return "/inv/personrole/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "personRoleId" ) Integer personRoleId ) {
		model.addAttribute( "roleList", invDaoService.getRoleService().list() );
		model.addAttribute( "personList", invDaoService.getPersonService().list() );


        model.addAttribute( "personRole", invDaoService.getPersonRoleService().findById( personRoleId ) );
        return "/inv/personrole/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "personRoleId" ) Integer personRoleId ) {

        model.addAttribute( "personRole", invDaoService.getPersonRoleService().findById( personRoleId ) );
        return "/inv/personrole/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "personRole" ) PersonRole personRole, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
					model.addAttribute( "roleList", invDaoService.getRoleService().list() );
		model.addAttribute( "personList", invDaoService.getPersonService().list() );

			return "/inv/personrole/edit"; 
		} else {
			try {
				invDaoService.getPersonRoleService().saveOrUpdate( personRole );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				invDaoService.getPersonRoleService().merge( personRole );
			}
		}
		return "redirect:/personrole/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "personRoleId" ) Integer personRoleId ) {

        model.addAttribute( "personRole", invDaoService.getPersonRoleService().findById( personRoleId ) );
        return "/inv/personrole/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "personRoleId" ) Integer personRoleId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            invDaoService.getPersonRoleService().delete( invDaoService.getPersonRoleService().findById( personRoleId ) );
        }
        return "redirect:/personrole/list";
    }
}