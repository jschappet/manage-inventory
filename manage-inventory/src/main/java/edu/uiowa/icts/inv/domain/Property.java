package edu.uiowa.icts.inv.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.*;
import edu.uiowa.icts.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen - www.icts.uiowa.edu/protogen 
 * @since 10/16/2015 11:14:56 AM CDT
 */
@Entity( name = "edu_uiowa_icts_inv_domain_property" )
@Table( name = "property", schema = "inv" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Property { 

	private static final Log log = LogFactory.getLog( Property.class );

	private static final String FORMAT_STRING =  "yyyy-MM-dd" ;
	
	private static final DateFormat YMD = new SimpleDateFormat( FORMAT_STRING);
	
        private Integer propertyId;
        private String name;
        private String description;
        private String createdBy;
    @DateTimeFormat( pattern =  FORMAT_STRING  )
    private Date created;
        private String updatedBy;
    @DateTimeFormat( pattern = FORMAT_STRING )
    private Date updated;
        private Set<Task> tasks = new HashSet<Task>(0);
        private Location location;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="inv.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "property_id", unique = true, nullable = false)
    public Integer getPropertyId(){
        return propertyId;
    }

    public void setPropertyId(Integer propertyId){
        this.propertyId = propertyId;
    }

    @Column(name = "name")
    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    @Column(name = "description")
    public String getDescription(){
        return description;
    }

    public void setDescription(String description){
        this.description = description;
    }

    @Column(name = "created_by")
    public String getCreatedBy(){
        return createdBy;
    }

    public void setCreatedBy(String createdBy){
        this.createdBy = createdBy;
    }

    @Column(name = "created")
    public Date getCreated(){
        return created;
    }

    @JsonSetter
    public void setCreated(Date created){
        this.created = created;
    }

    @JsonIgnore
    public void setCreated( String created ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.created = formatter.parse(created);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for Created", e );
        }
    }

    @Column(name = "updated_by")
    public String getUpdatedBy(){
        return updatedBy;
    }

    public void setUpdatedBy(String updatedBy){
        this.updatedBy = updatedBy;
    }

    @Column(name = "updated")
    public Date getUpdated(){
        return updated;
    }

    @Transient
    public String getUpdatedString(){
    	if (updated == null) return "";
        return YMD.format(updated);
    }
    
    @Transient
    public String getCreatedString(){
    	if (created == null) return "";
        return YMD.format(created);
    }

    
    @JsonSetter
    public void setUpdated(Date updated){
        this.updated = updated;
    }

    @JsonIgnore
    public void setUpdated( String updated ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.updated = formatter.parse(updated);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for Updated", e );
        }
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY,   mappedBy = "property", targetEntity=Task.class, cascade=CascadeType.REMOVE)
    public Set<Task> getTasks(){
        return tasks;
    }

    public void setTasks(Set<Task> tasks){
        this.tasks = tasks;
    }

    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Location.class )
    @JoinColumn(name = "location_id",nullable = true)
    public Location getLocation(){
        return location;
    }

    public void setLocation(Location location){
        this.location = location;
    }


}
