package edu.uiowa.icts.inv.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.inv.domain.*;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @since 10/16/2015 11:14:56 CDT
 */
@Controller( value = "edu_uiowa_icts_inv_controller_systemsetting_controller" )
@RequestMapping( "/systemsetting" )
public class SystemSettingController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( SystemSettingController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "systemSettingList", invDaoService.getSystemSettingService().list() );
        return "/inv/systemsetting/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list() {
        return "/inv/systemsetting/list";
    }

	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		DataTable dt = new DataTable();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = invDaoService.getSystemSettingService().count( options );
            List<SystemSetting> systemSettingList = invDaoService.getSystemSettingService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( SystemSetting systemSetting : systemSettingList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					if( StringUtils.equals( "name", headerName ) ){
						tableRow.put( dataName, systemSetting.getName() );
					} else if( StringUtils.equals( "value", headerName ) ){
						tableRow.put( dataName, systemSetting.getValue() );
					} else if( StringUtils.equals( "active", headerName ) ){
						tableRow.put( dataName, systemSetting.getActive() );
					} else if( StringUtils.equals( "notes", headerName ) ){
						tableRow.put( dataName, systemSetting.getNotes() );
					} else if( StringUtils.equals( "lastUpdatedBy", headerName ) ){
						tableRow.put( dataName, systemSetting.getLastUpdatedBy() );
					} else if( StringUtils.equals( "lastUpdated", headerName ) ){
						tableRow.put( dataName, systemSetting.getLastUpdated() );
					} else if( StringUtils.equals( "urls", headerName ) ) {
						String urls = "";
						if( StringUtils.equals( "list", display ) ){
							urls += "<a href=\"" + contextPath + "/systemsetting/show?"+"name="+systemSetting.getName()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
							urls += "<a href=\"" + contextPath + "/systemsetting/edit?"+"name="+systemSetting.getName()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
							urls += "<a href=\"" + contextPath + "/systemsetting/delete?"+"name="+systemSetting.getName()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
						} else {

						}
						tableRow.put( dataName, urls );
					} else {
						tableRow.put( "error", "[error: column " + headerName + " not supported]" );
					}
				}
				data.add( tableRow );
			}

			dt.setDraw( dataTableRequest.getDraw() );
            dt.setRecordsFiltered( count );
            dt.setRecordsTotal( count );
			dt.setData( data );

		} catch ( Exception e ) {
			log.error( "error builing datatable json object for SystemSetting", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
		return dt;
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "systemSetting", new SystemSetting() );

        return "/inv/systemsetting/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "name" ) String systemSettingId ) {


        model.addAttribute( "systemSetting", invDaoService.getSystemSettingService().findById( systemSettingId ) );
        return "/inv/systemsetting/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "name" ) String systemSettingId ) {

        model.addAttribute( "systemSetting", invDaoService.getSystemSettingService().findById( systemSettingId ) );
        return "/inv/systemsetting/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "systemSetting" ) SystemSetting systemSetting, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
			
			return "/inv/systemsetting/edit"; 
		} else {
			try {
				invDaoService.getSystemSettingService().saveOrUpdate( systemSetting );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				invDaoService.getSystemSettingService().merge( systemSetting );
			}
		}
		return "redirect:/systemsetting/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "name" ) String systemSettingId ) {

        model.addAttribute( "systemSetting", invDaoService.getSystemSettingService().findById( systemSettingId ) );
        return "/inv/systemsetting/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "name" ) String systemSettingId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            invDaoService.getSystemSettingService().delete( invDaoService.getSystemSettingService().findById( systemSettingId ) );
        }
        return "redirect:/systemsetting/list";
    }
}