package edu.uiowa.icts.inv.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.inv.domain.*;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @since 10/16/2015 11:14:57 CDT
 */
@Controller( value = "edu_uiowa_icts_inv_controller_location_controller" )
@RequestMapping( "/location" )
public class LocationController extends AbstractInvController {

    private static final Log log = LogFactory.getLog( LocationController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "locationList", invDaoService.getLocationService().list() );
        return "/inv/location/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list() {
        return "/inv/location/list";
    }

	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		DataTable dt = new DataTable();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = invDaoService.getLocationService().count( options );
            List<Location> locationList = invDaoService.getLocationService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( Location location : locationList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					if( StringUtils.equals( "locationId", headerName ) ){
						tableRow.put( dataName, location.getLocationId() );
					} else if( StringUtils.equals( "name", headerName ) ){
						tableRow.put( dataName, location.getName() );
					} else if( StringUtils.equals( "description", headerName ) ){
						tableRow.put( dataName, location.getDescription() );
					} else if( StringUtils.equals( "address1", headerName ) ){
						tableRow.put( dataName, location.getAddress1() );
					} else if( StringUtils.equals( "address2", headerName ) ){
						tableRow.put( dataName, location.getAddress2() );
					} else if( StringUtils.equals( "city", headerName ) ){
						tableRow.put( dataName, location.getCity() );
					} else if( StringUtils.equals( "state", headerName ) ){
						tableRow.put( dataName, location.getState() );
					} else if( StringUtils.equals( "zipCode", headerName ) ){
						tableRow.put( dataName, location.getZipCode() );
					} else if( StringUtils.equals( "propertys", headerName ) ){
						tableRow.put( dataName, location.getPropertys().size() );
					} else if( StringUtils.equals( "urls", headerName ) ) {
						String urls = "";
						if( StringUtils.equals( "list", display ) ){
							urls += "<a href=\"" + contextPath + "/location/show?"+"locationId="+location.getLocationId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
							urls += "<a href=\"" + contextPath + "/location/edit?"+"locationId="+location.getLocationId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
							urls += "<a href=\"" + contextPath + "/location/delete?"+"locationId="+location.getLocationId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
						} else {

						}
						tableRow.put( dataName, urls );
					} else {
						tableRow.put( "error", "[error: column " + headerName + " not supported]" );
					}
				}
				data.add( tableRow );
			}

			dt.setDraw( dataTableRequest.getDraw() );
            dt.setRecordsFiltered( count );
            dt.setRecordsTotal( count );
			dt.setData( data );

		} catch ( Exception e ) {
			log.error( "error builing datatable json object for Location", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
		return dt;
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "location", new Location() );

        return "/inv/location/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "locationId" ) Integer locationId ) {


        model.addAttribute( "location", invDaoService.getLocationService().findById( locationId ) );
        return "/inv/location/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "locationId" ) Integer locationId ) {

        model.addAttribute( "location", invDaoService.getLocationService().findById( locationId ) );
        return "/inv/location/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "location" ) Location location, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
			
			return "/inv/location/edit"; 
		} else {
		
			try {
				invDaoService.getLocationService().saveOrUpdate( location );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				invDaoService.getLocationService().merge( location );
			}
		}
		return "redirect:/location/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "locationId" ) Integer locationId ) {

        model.addAttribute( "location", invDaoService.getLocationService().findById( locationId ) );
        return "/inv/location/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "locationId" ) Integer locationId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            invDaoService.getLocationService().delete( invDaoService.getLocationService().findById( locationId ) );
        }
        return "redirect:/location/list";
    }
}