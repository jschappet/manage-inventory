package edu.uiowa.icts.inv.resource;




import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import edu.uiowa.icts.inv.dao.*;
import edu.uiowa.icts.inv.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import edu.uiowa.icts.inv.controller.AbstractControllerMVCTests;

/**
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since Sun Oct 18 07:52:59 CDT 2015
 */
public class TaskTypeResourceMvcTest extends AbstractControllerMVCTests {
	
    private TaskType firstTaskType;
    private ObjectMapper mapper;
    
    @Before
    public void before() { 
        // add 20 records to test database
        for(int x=1; x<21; x++){
        	TaskType taskType = new TaskType();
        	invDaoService.getTaskTypeService().save(taskType);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstTaskType = taskType;
	        }
        }   
        this.mapper = new ObjectMapper();
        // fix NonUniqueObjectException
        this.invDaoService.getTaskTypeService().getSession().flush();
        this.invDaoService.getTaskTypeService().getSession().clear();
    }    
      
    @Test
    public void getByPathVariableIdShouldLoadAndReturnObject() throws Exception {
    	mockMvc.perform(get("/api/tasktype/"+firstTaskType.getTypeId().toString()))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        .andExpect(jsonPath("$.typeId", is(firstTaskType.getTypeId())))
        ;
    }
  
    @Test
    public void getByPathVariableIdShouldReturn404ForBogusId() throws Exception {
    	mockMvc.perform(get("/api/tasktype/-123")).andExpect(status().isNotFound()).andExpect(jsonPath("$.message", is("/api/tasktype/-123 could not be found.")));
    }
    
    @Test
    public void restMappingNotFoundShouldReturn404() throws Exception {
    	mockMvc.perform(get("/api/tasktype/asdfasdf/asdfasdf"))
    	.andExpect(status().isNotFound())
    	 .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        .andExpect(jsonPath("$.message", is("/api/tasktype/asdfasdf/asdfasdf could not be found.")))
    	;
    }
    
    @Test
    public void createShouldPersistAndReturnObject() throws Exception {
	   long count = invDaoService.getTaskTypeService().count();	       
	   TaskType taskType = new TaskType(); 
       
       mockMvc.perform(post("/api/tasktype/").content(this.mapper.writeValueAsString(taskType))
	   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
       .andExpect(status().isOk())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.typeId").value(IsNull.notNullValue()))  
       ;
       
       assertEquals("count should increase by 1", count +1 , invDaoService.getTaskTypeService().count());
	}
     
    @Test
    public void updateShouldPersistExistingAndReturnObject() throws Exception {
       long count = invDaoService.getTaskTypeService().count();

       mockMvc.perform(post("/api/tasktype/"+ firstTaskType.getTypeId().toString())
    		   .content(this.mapper.writeValueAsString(firstTaskType))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
       .andExpect(status().isOk())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.typeId", is(firstTaskType.getTypeId())))
       ;
         
       assertEquals("count NOT should increase", count , invDaoService.getTaskTypeService().count());
  	}  
    
    @Test
    public void updateByPathVariableIdShouldReturn404ForMismatchBetweenPathIdAndObjectId() throws Exception {	       
       String correctId =  firstTaskType.getTypeId().toString();
       // this ID manipulation should be overwritten with path variable id
       firstTaskType.setTypeId(-123);
       
       mockMvc.perform(post("/api/tasktype/"+correctId)
    		   .content(this.mapper.writeValueAsString(firstTaskType))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
       .andExpect(status().isNotFound())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.message", is("/api/tasktype/" +correctId +" could not be found.")))
       ;
  	} 
    
    @Test
    public void updateByPathVariableIdShouldReturn404ForBogusPathId() throws Exception {
    	mockMvc.perform(post("/api/tasktype/-123")
    			.content(this.mapper.writeValueAsString(firstTaskType))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
    	.andExpect(status().isNotFound())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	    .andExpect(jsonPath("$.message", is("/api/tasktype/-123 could not be found.")));
    }
    
    @Test
    public void deleteShouldDeleteAndReturnStatusOk() throws Exception {
        long count = invDaoService.getTaskTypeService().count();

        mockMvc.perform(delete("/api/tasktype/"+ firstTaskType.getTypeId().toString()))
       .andExpect(status().isOk());  
       
       assertEquals("count should decrease by 1", count - 1 , invDaoService.getTaskTypeService().count());
    }
    
    @Test
    public void deleteShouldFailWithBogusId() throws Exception {
        long count = invDaoService.getTaskTypeService().count();

        mockMvc.perform(delete("/api/tasktype/-123"))
       .andExpect(status().isNotFound())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.message", is("/api/tasktype/-123 could not be found.")));  
       
       assertEquals("count should NOT decrease by 1", count , invDaoService.getTaskTypeService().count());
    }

    @Test
    public void listShouldReturnAllByDefault() throws Exception {
    	mockMvc.perform(get("/api/tasktype/"))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
         .andExpect(jsonPath("$.", hasSize(is(20))))
        .andExpect(jsonPath("$.[0].typeId", is(firstTaskType.getTypeId())))
        ;
    }
    
    @Test
    public void listShouldReturnAllByDefaultWithoutTrailUrlSlash() throws Exception {
    	mockMvc.perform(get("/api/tasktype"))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
         .andExpect(jsonPath("$.", hasSize(is(20))))
        .andExpect(jsonPath("$.[0].typeId", is(firstTaskType.getTypeId())))
        ;
    }
}