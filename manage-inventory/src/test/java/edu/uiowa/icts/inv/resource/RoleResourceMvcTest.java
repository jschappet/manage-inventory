package edu.uiowa.icts.inv.resource;


import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import edu.uiowa.icts.inv.dao.*;
import edu.uiowa.icts.inv.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import edu.uiowa.icts.inv.controller.AbstractControllerMVCTests;

/**
 * Generated by Protogen
 * @since Fri Oct 16 11:14:57 CDT 2015
 */
public class RoleResourceMvcTest extends AbstractControllerMVCTests {
	
    private Role firstRole;
    private ObjectMapper mapper;
    
    @Before
    public void before() {
              // add 20 records to test database
        for(int x=1; x<21; x++){
        	Role role = new Role();
        	invDaoService.getRoleService().save(role);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstRole = role;
	        }
        }   
        this.mapper = new ObjectMapper();
        // fix NonUniqueObjectException
        this.invDaoService.getRoleService().getSession().flush();
        this.invDaoService.getRoleService().getSession().clear();
          }    
    
            
	    @Test
	    public void getByPathVariableIdShouldLoadAndReturnObject() throws Exception {
	    	mockMvc.perform(get("/api/role/"+firstRole.getRoleId().toString()))
	         .andExpect(status().isOk())
	         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	        .andExpect(jsonPath("$.roleId", is(firstRole.getRoleId())))
	        ;
	    }
      
	    @Test
	    public void getByPathVariableIdShouldReturn404ForBogusId() throws Exception {
	    	mockMvc.perform(get("/api/role/-123")).andExpect(status().isNotFound()).andExpect(jsonPath("$.message", is("/api/role/-123 could not be found.")));
	    }
	    
	    @Test
	    public void restMappingNotFoundShouldReturn404() throws Exception {
	    	mockMvc.perform(get("/api/role/asdfasdf/asdfasdf"))
	    	.andExpect(status().isNotFound())
	    	 .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	        .andExpect(jsonPath("$.message", is("/api/role/asdfasdf/asdfasdf could not be found.")))
	    	;
	    }
	    
	    @Test
	    public void createShouldPersistAndReturnObject() throws Exception {
		   long count = invDaoService.getRoleService().count();	       
		   Role role = new Role(); 
	       
	       mockMvc.perform(post("/api/role/").content(this.mapper.writeValueAsString(role))
		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
	       .andExpect(status().isOk())
	       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	       .andExpect(jsonPath("$.roleId").value(IsNull.notNullValue()))  
	       ;
	       
	       assertEquals("count should increase by 1", count +1 , invDaoService.getRoleService().count());
		}
	     
	    @Test
	    public void updateShouldPersistExistingAndReturnObject() throws Exception {
	       long count = invDaoService.getRoleService().count();

	       mockMvc.perform(post("/api/role/"+ firstRole.getRoleId().toString())
	    		   .content(this.mapper.writeValueAsString(firstRole))
	    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
	       .andExpect(status().isOk())
	       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	       .andExpect(jsonPath("$.roleId", is(firstRole.getRoleId())))
	       ;
	         
	       assertEquals("count NOT should increase", count , invDaoService.getRoleService().count());
	  	}  
	    
	    @Test
	    public void updateByPathVariableIdShouldReturn404ForMismatchBetweenPathIdAndObjectId() throws Exception {	       
	       String correctId =  firstRole.getRoleId().toString();
	       // this ID manipulation should be overwritten with path variable id
	       firstRole.setRoleId(-123);
	       
	       mockMvc.perform(post("/api/role/"+correctId)
	    		   .content(this.mapper.writeValueAsString(firstRole))
	    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
	       .andExpect(status().isNotFound())
	       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	       .andExpect(jsonPath("$.message", is("/api/role/" +correctId +" could not be found.")))
	       ;
	  	} 
	    
	    @Test
	    public void updateByPathVariableIdShouldReturn404ForBogusPathId() throws Exception {
	    	mockMvc.perform(post("/api/role/-123")
	    			.content(this.mapper.writeValueAsString(firstRole))
	    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON))
	    	.andExpect(status().isNotFound())
	    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
		    .andExpect(jsonPath("$.message", is("/api/role/-123 could not be found.")));
	    }
	    
	    @Test
	    public void deleteShouldDeleteAndReturnStatusOk() throws Exception {
	        long count = invDaoService.getRoleService().count();

	        mockMvc.perform(delete("/api/role/"+ firstRole.getRoleId().toString()))
	       .andExpect(status().isOk());  
	       
	       assertEquals("count should decrease by 1", count - 1 , invDaoService.getRoleService().count());
	    }
	    
	    @Test
	    public void deleteShouldFailWithBogusId() throws Exception {
	        long count = invDaoService.getRoleService().count();

	        mockMvc.perform(delete("/api/role/-123"))
	       .andExpect(status().isNotFound())
	       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	       .andExpect(jsonPath("$.message", is("/api/role/-123 could not be found.")));  
	       
	       assertEquals("count should NOT decrease by 1", count , invDaoService.getRoleService().count());
	    }
    
	    @Test
	    public void listShouldReturnAllByDefault() throws Exception {
	    	mockMvc.perform(get("/api/role/"))
	         .andExpect(status().isOk())
	         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	         .andExpect(jsonPath("$.", hasSize(is(20))))
	        .andExpect(jsonPath("$.[0].roleId", is(firstRole.getRoleId())))
	        ;
	    }
	    
	    @Test
	    public void listShouldReturnAllByDefaultWithoutTrailUrlSlash() throws Exception {
	    	mockMvc.perform(get("/api/role"))
	         .andExpect(status().isOk())
	         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	         .andExpect(jsonPath("$.", hasSize(is(20))))
	        .andExpect(jsonPath("$.[0].roleId", is(firstRole.getRoleId())))
	        ;
	    }
      }